<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:f="/lib/form">
    <!--
        Temporary workaround for https://issues.jenkins-ci.org/browse/JENKINS-37616
        Using Item.CONFIGURE as users authorized to do so can provision via job execution.
        Once the plugins starts to depend on core new enough, we can use Cloud.PROVISION again.
     -->
    <j:getStatic var="buildPermission" className="hudson.model.Item" field="CONFIGURE"/>
    <j:if test="${it.hasPermission(buildPermission) or it.hasPermission(it.PROVISION)}">

        <tr>
            <td/>
            <td colspan="${monitors.size()+2}">

                    <input type="submit" class="jclouds-provision-button" value="${%Provision via OpenStack Cloud Plugin} - ${it.name}"/>
                    <st:once>
                        <script>
                            Behaviour.register({
                                ".jclouds-provision-button" : function (e) {
                                    var submitHandler = function(type, args, item) {
                                        new Ajax.Request("${rootURL}/cloud/${it.name}/provision", {
                                            parameters: { name: item.value },
                                            onFailure: function(obj) {
                                                hoverNotification('Provisioning failed', item.element);
                                                console.log(obj.status + " " + obj.statusText + ": " + obj.responseText)
                                            }
                                        });
                                        hoverNotification('Provisioning started', item.element);
                                    };

                                    var items = [
                                        <j:forEach var="t" items="${it.templates}">
                                            { text: "${t.name}", value: "${t.name}", onclick: { fn: submitHandler } },
                                        </j:forEach>
                                    ];
                                    var menu = new YAHOO.widget.Button(e, { type: "menu", menu: items, name: "name" });
                                }
                            });
                        </script>
                    </st:once>
            </td>
        </tr>
    </j:if>
</j:jelly>
